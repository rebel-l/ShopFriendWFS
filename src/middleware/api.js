import { startSpinner, stopSpinner } from "../redux/actions/spinner";
import { addNotification } from "../redux/actions/notification";
import { API } from "../redux/types/api";

import axios from "axios";

import { newError } from "../model/notification";

import store from "store2";

axios.defaults.headers.common.Accept = "application/json;charset=UTF-8";
axios.defaults.headers.common["Content-Type"] = "application/json;charset=UTF-8";

/**
 * Placeholder where to replace service name.
 *
 * @type {string}
 */
const

    /**
     * Placeholder for the service name.
     *
     * @type {string}
     */
    keyService = "{service}",

    /**
     * Base URL temporary from local environment.
     *
     * TODO: needs to be configured by environment (should be generated by webpack)
     *
     * @type {string}
     */
    // eslint-disable-next-line sort-vars
    baseURL = `https://${keyService}.shopfriend.test`,

    /**
     * Builds the URL based on the payload received.
     *
     * @param payload
     * @returns {string}
     */
    // eslint-disable-next-line sort-vars
    getURL = (payload) => baseURL.replace(
        keyService,
        payload.service,
    ) + payload.path,

    /**
     * Returns an empty array (valid) if the payload received has all mandatory fields set. Otherwise (invalid)
     * it contains entries describing the missing fields.
     *
     * @param payload
     * @returns {[]}
     */
    validatePayload = (payload) => {
        const errs = [];

        if (!payload.method) {
            errs.push("payload has no method");
        }

        if (!payload.service) {
            errs.push("payload has no service defined");
        }

        if (!payload.path) {
            errs.push("payload did not define a path");
        }

        return errs;
    },

    /**
     * The API middleware on which to act on any API action.
     *
     * @param dispatch
     * @returns {function(*): function(*=): undefined}
     */
    // eslint-disable-next-line sort-vars
    api = ({ dispatch }) => (next) => (action) => {
        next(action);

        if (action.type !== API) {
            return;
        }

        dispatch(startSpinner());

        const dataOrParams = [
                "GET",
                "DELETE",
            ].includes(action.payload.method) ?
                "params" :
                "data",
            errorsEmpty = 0,
            errs = validatePayload(action.payload);

        if (errs.length > errorsEmpty) {
            dispatch(stopSpinner());
            dispatch(addNotification(newError("error parsing API payload")));

            return;
        }

        axios.interceptors.request.use((config) => {
            const accessToken = store.session.get("accessToken"); // TODO: token manager

            if (accessToken !== null && accessToken !== "") {
                config.headers.Authorization = `Bearer ${accessToken}`;
            }

            return config;
        }, (error) => Promise.reject(error));

        axios.request({
            [dataOrParams]: action.payload.data,
            "method": action.payload.method,
            "url": getURL(action.payload),
            // eslint-disable-next-line id-denylist
        }).then(({ data }) => {
            dispatch(action.payload.dispatch(data));
        }).
            catch((error) => {
                dispatch(addNotification(newError(error.message)));
            }).
            finally(() => {
                dispatch(stopSpinner());
            });
    };

export default api;
